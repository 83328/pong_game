# input {
#   beats {
#     port => 5044
#   }
# }

# input {
#   syslog {
#     port => 5000
#     codec => cef
#     syslog_field => "syslog"
#     grok_pattern => "<%{POSINT:priority}>%{SYSLOGTIMESTAMP:timestamp}"
#   }
# }

input {
  tcp {
    port => 5000
    type => syslog
  }
  udp {
    port => 5000
    type => syslog
	# grok_pattern => "(?:<%{POSINT:priority}>%{SYSLOGLINE}|YOUR NONSTANDARD PATTERN HERE)"
  }
}


filter {
  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
}


# filter {
#   if [type] == "syslog" {
#     if "backend" in [tags] {
#       grok {
#         match => { "message" => "<%{POSINT:priority}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{IPORHOST:client_ip}:%{POSINT:client_port} - - \[%{POSINT:day}/%{MONTH:month}/%{YEAR:year}:%{TIME:time}\] \"%{WORD:http_method} %{URIPATH:request_path}.*\" %{NUMBER:http_status} %{NUMBER:response_size}" }
#       }

#       # Parse the syslog timestamp
#       date {
#         match => [ "syslog_timestamp", "MMM dd HH:mm:ss" ]
#         target => "@timestamp"  # Replace the default @timestamp with the parsed timestamp
#       }

#       # Clean up fields
#       mutate {
#         remove_field => [ "syslog_timestamp", "priority", "syslog_hostname", "syslog_program", "syslog_pid" ]  # Remove unnecessary fields
#       }
#     }
#   }
# }

# filter {

#   if [type] == "syslog" {
# 	grok {
#       match => { "message" => "<%{NUMBER:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:syslog_program}(?:\[%{NUMBER:pid}\])?: %{GREEDYDATA:log_message}" }
#     }
# 	# if [syslog_program] == "backend" {
# 	# 	grok {
# 	# 		match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{GREEDYDATA:log_message}%{IPORHOST:client_ip}:%{POSINT:client_port} .* \[%{POSINT:day}/.*\] "%{WORD:http_method} %{URIPATH:request_path}.*" %{NUMBER:http_status} %{NUMBER:response_size}" }
# 	# 	}
# 	# 	  # Parse the timestamp from the log line
#     #    date {
#     #      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss" ]
#     #      target => "@timestamp"
#     #    }
#     # }
# 	# }
# 	# if [syslog_program] == "caddy" {
#     #   grok {
#     #     match => { "log_message" => "%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME} %{LOGLEVEL:loglevel} %{GREEDYDATA:log_message}" }
#     #   }
# 	# }
#     # Parse the timestamp
#     date {
#       match => [ "timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
#       target => "@timestamp"  # Replace the default @timestamp with the parsed timestamp
#     }
#   }
# }

output {
  elasticsearch { 
	hosts => ["elasticsearch:9200"] 
	# index => "%{type}_indexer"
    user => "elastic"
    password => "LYCGEtv92deGJROBL*lp"
	# ssl => false  # Disable SSL if not using HTTPS
}
  stdout { codec => rubydebug }
}